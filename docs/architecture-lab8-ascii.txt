================================================================================
LAB 8 ARCHITECTURE: Streamlit Web Application
================================================================================

OVERVIEW
--------
Transforms the command-line RAG agent into a user-friendly web application
using Streamlit, adding session management, UI components, and persistent
conversation history.


SYSTEM ARCHITECTURE
-------------------

BROWSER                    WEB SERVER                    BACKEND
───────                    ──────────                    ───────

┌──────────────┐          ┌──────────────────┐         ┌──────────────────┐
│   USER       │          │   STREAMLIT      │         │  RAG AGENT       │
│   INTERFACE  │          │   APPLICATION    │         │                  │
│              │          │                  │         │  ┌────────────┐  │
│ ┌──────────┐ │          │  ┌────────────┐  │         │  │ Query      │  │
│ │ Chat     │ │  HTTP    │  │ Session    │  │  Call   │  │ Processing │  │
│ │ Input    │◄┼─────────►│  │ State      │◄─┼────────►│  └────────────┘  │
│ └──────────┘ │          │  └────────────┘  │         │         │        │
│              │          │         │        │         │         ▼        │
│ ┌──────────┐ │          │         ▼        │         │  ┌────────────┐  │
│ │ Chat     │ │          │  ┌────────────┐  │         │  │Classification│
│ │ History  │◄┼──────────┤  │ UI         │  │         │  │   (MCP)    │  │
│ └──────────┘ │          │  │ Components │  │         │  └────────────┘  │
│              │          │  └────────────┘  │         │         │        │
│ ┌──────────┐ │          │         │        │         │         ▼        │
│ │ Memory   │ │          │         ▼        │         │  ┌────────────┐  │
│ │ Dashboard│◄┼──────────┤  ┌────────────┐  │         │  │   RAG      │  │
│ └──────────┘ │          │  │ Response   │  │         │  │  Pipeline  │  │
│              │          │  │ Renderer   │  │         │  └────────────┘  │
│ ┌──────────┐ │          │  └────────────┘  │         │         │        │
│ │ Settings │ │          │                  │         │         ▼        │
│ │ Sidebar  │ │          │                  │         │  ┌────────────┐  │
│ └──────────┘ │          │                  │         │  │  Memory    │  │
└──────────────┘          └──────────────────┘         │  │  System    │  │
                                                       │  └────────────┘  │
                                                       └──────────────────┘


STREAMLIT SESSION STATE
-----------------------

┌──────────────────────────────────────────────────────────────┐
│ st.session_state (Per-User Session Storage)                 │
├──────────────────────────────────────────────────────────────┤
│                                                              │
│ Key                   Type              Purpose             │
│ ───                   ────              ───────             │
│                                                              │
│ messages              List[Dict]        Chat history        │
│   [{                                                         │
│     "role": "user",                                          │
│     "content": "Query text",                                 │
│     "timestamp": "..."                                       │
│   }, ...]                                                    │
│                                                              │
│ buffer_memory         ConversationMemory Recent exchanges   │
│                                                              │
│ vector_memory         VectorMemory       Semantic recall    │
│                                                              │
│ agent                 RAGAgent           Agent instance     │
│                                                              │
│ settings              Dict               User preferences   │
│   {                                                          │
│     "max_memory": 5,                                         │
│     "top_k": 5,                                              │
│     "theme": "dark"                                          │
│   }                                                          │
└──────────────────────────────────────────────────────────────┘


UI COMPONENTS LAYOUT
--------------------

┌──────────────────────────────────────────────────────────────┐
│  HEADER                                                      │
│  ┌────────────────────────────────────────────────────────┐  │
│  │  🤖 Intelligent RAG Agent                              │  │
│  │  Powered by Classification + RAG + Memory              │  │
│  └────────────────────────────────────────────────────────┘  │
└──────────────────────────────────────────────────────────────┘

┌──────────────┬───────────────────────────────────────────────┐
│  SIDEBAR     │  MAIN CONTENT AREA                            │
│              │                                               │
│ ┌──────────┐ │  ┌─────────────────────────────────────────┐  │
│ │ Settings │ │  │  CHAT HISTORY                           │  │
│ └──────────┘ │  │                                         │  │
│              │  │  ┌────────────────────────────────────┐  │  │
│ Memory:      │  │  │ 👤 User                            │  │  │
│ □ Buffer     │  │  │ What's the weather in Paris?       │  │  │
│ ☑ Vector     │  │  └────────────────────────────────────┘  │  │
│              │  │                                         │  │
│ Top-K: [5▾]  │  │  ┌────────────────────────────────────┐  │  │
│              │  │  │ 🤖 Assistant                       │  │  │
│ Max Memory:  │  │  │ Classification: weather            │  │  │
│   [5     ]   │  │  │                                    │  │  │
│              │  │  │ Paris: 72°F, Clear sky             │  │  │
│ ┌──────────┐ │  │  │                                    │  │  │
│ │ Memory   │ │  │  │ Source: Open-Meteo API             │  │  │
│ │Dashboard │ │  │  └────────────────────────────────────┘  │  │
│ └──────────┘ │  │                                         │  │
│              │  │  ┌────────────────────────────────────┐  │  │
│ Exchanges:   │  │  │ 👤 User                            │  │  │
│   3/5        │  │  │ Which office has highest revenue?  │  │  │
│              │  │  └────────────────────────────────────┘  │  │
│ Vector Mem:  │  │                                         │  │
│   12 docs    │  │  ┌────────────────────────────────────┐  │  │
│              │  │  │ 🤖 Assistant                       │  │  │
│ ┌──────────┐ │  │  │ Classification: document           │  │  │
│ │  Clear   │ │  │  │                                    │  │  │
│ │  Memory  │ │  │  │ New York office: $85.5M            │  │  │
│ └──────────┘ │  │  │                                    │  │  │
│              │  │  │ Source: offices.pdf (chunk 001)    │  │  │
│ ┌──────────┐ │  │  └────────────────────────────────────┘  │  │
│ │ Export   │ │  │                                         │  │
│ │ Chat     │ │  └─────────────────────────────────────────┘  │
│ └──────────┘ │                                               │
│              │  ┌─────────────────────────────────────────┐  │
└──────────────┤  │  CHAT INPUT                             │  │
               │  │                                         │  │
               │  │  Type your message...             [Send]│  │
               │  └─────────────────────────────────────────┘  │
               └───────────────────────────────────────────────┘


USER INTERACTION FLOW
---------------------

Step 1: User Enters Query
┌────────────────────────────────────┐
│ Input: "What's the weather in      │
│         Paris?"                    │
│                                    │
│ User clicks [Send]                 │
└────────────┬───────────────────────┘
             │
             ▼
Step 2: Streamlit Processing
┌────────────────────────────────────┐
│ 1. Capture input from text field   │
│ 2. Add to st.session_state.messages│
│ 3. Display in chat UI              │
│ 4. Call agent.handle_query()       │
└────────────┬───────────────────────┘
             │
             ▼
Step 3: Agent Processing
┌────────────────────────────────────┐
│ 1. Retrieve memory context         │
│ 2. Classify query (MCP)            │
│ 3. Route to appropriate handler    │
│ 4. Execute and generate response   │
│ 5. Return response + metadata      │
└────────────┬───────────────────────┘
             │
             ▼
Step 4: Display Response
┌────────────────────────────────────┐
│ 1. Receive response from agent     │
│ 2. Add to st.session_state.messages│
│ 3. Render in chat UI               │
│ 4. Update memory dashboard         │
│ 5. Store in session memories       │
└────────────────────────────────────┘


CHAT MESSAGE STRUCTURE
----------------------

User Message:
{
  "role": "user",
  "content": "What's the weather in Paris?",
  "timestamp": "2025-10-06 14:23:45"
}

Assistant Message:
{
  "role": "assistant",
  "content": "Paris: 72°F, Clear sky",
  "timestamp": "2025-10-06 14:23:52",
  "metadata": {
    "classification": "weather",
    "confidence": 0.98,
    "source": "Open-Meteo API",
    "processing_time_ms": 3245
  }
}


MEMORY DASHBOARD COMPONENT
---------------------------

┌──────────────────────────────────────────────────────────────┐
│ 📊 Memory Dashboard                                          │
├──────────────────────────────────────────────────────────────┤
│                                                              │
│ Buffer Memory                                                │
│ ─────────────                                                │
│ Status: 3/5 exchanges stored                                 │
│                                                              │
│ Recent Exchanges:                                            │
│ 1. [14:20] User: "Tell me about offices"                     │
│           Agent: "We have 10 offices..."                     │
│                                                              │
│ 2. [14:21] User: "Highest revenue?"                          │
│           Agent: "New York: $85.5M"                          │
│                                                              │
│ 3. [14:23] User: "Weather in Paris?"                         │
│           Agent: "Paris: 72°F, Clear"                        │
│                                                              │
│ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━  │
│                                                              │
│ Vector Memory                                                │
│ ─────────────                                                │
│ Status: 12 conversations indexed                             │
│ Collection: conversation_memory                              │
│                                                              │
│ Recent Additions:                                            │
│ • "office revenue discussion" (0.94 similarity)              │
│ • "weather query Paris" (0.89 similarity)                    │
│                                                              │
│ Storage Size: 4.2 KB                                         │
│                                                              │
│ [Clear Buffer] [Clear Vector] [Export Memory]                │
└──────────────────────────────────────────────────────────────┘


STREAMLIT CODE STRUCTURE
-------------------------

streamlit_app.py:

# Imports
import streamlit as st
from rag_agent2_canonical import RAGAgent
from memory.conversation_memory import ConversationMemory
from memory.vector_memory import VectorMemory

# Page config
st.set_page_config(
    page_title="RAG Agent",
    page_icon="🤖",
    layout="wide"
)

# Initialize session state
if "messages" not in st.session_state:
    st.session_state.messages = []

if "buffer_memory" not in st.session_state:
    st.session_state.buffer_memory = ConversationMemory(max_exchanges=5)

if "vector_memory" not in st.session_state:
    st.session_state.vector_memory = VectorMemory()

if "agent" not in st.session_state:
    st.session_state.agent = RAGAgent(
        buffer_memory=st.session_state.buffer_memory,
        vector_memory=st.session_state.vector_memory
    )

# Sidebar
with st.sidebar:
    st.header("⚙️ Settings")

    # Memory settings
    max_memory = st.slider("Max Memory", 1, 10, 5)
    top_k = st.slider("Top-K Results", 1, 10, 5)

    # Memory dashboard
    st.header("📊 Memory Dashboard")
    buffer_count = len(st.session_state.buffer_memory.memory)
    vector_count = st.session_state.vector_memory.get_count()

    st.metric("Buffer Exchanges", f"{buffer_count}/5")
    st.metric("Vector Memories", vector_count)

    # Clear buttons
    if st.button("Clear Buffer"):
        st.session_state.buffer_memory.clear()
        st.success("Buffer cleared!")

    if st.button("Clear Vector"):
        st.session_state.vector_memory.clear()
        st.success("Vector memory cleared!")

# Main content
st.title("🤖 Intelligent RAG Agent")
st.caption("Powered by Classification + RAG + Memory")

# Display chat history
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.write(message["content"])

        # Show metadata for assistant messages
        if message["role"] == "assistant" and "metadata" in message:
            with st.expander("Details"):
                st.json(message["metadata"])

# Chat input
if prompt := st.chat_input("Type your message..."):
    # Add user message
    user_msg = {
        "role": "user",
        "content": prompt,
        "timestamp": datetime.now().isoformat()
    }
    st.session_state.messages.append(user_msg)

    # Display user message
    with st.chat_message("user"):
        st.write(prompt)

    # Get agent response
    with st.chat_message("assistant"):
        with st.spinner("Thinking..."):
            response, metadata = st.session_state.agent.handle_query(prompt)
            st.write(response)

            # Show metadata
            with st.expander("Details"):
                st.json(metadata)

    # Add assistant message
    assistant_msg = {
        "role": "assistant",
        "content": response,
        "timestamp": datetime.now().isoformat(),
        "metadata": metadata
    }
    st.session_state.messages.append(assistant_msg)

    # Rerun to update UI
    st.rerun()


SESSION PERSISTENCE
-------------------

Single User Session:
┌────────────────────────────────────┐
│ Session ID: abc123                 │
│                                    │
│ st.session_state:                  │
│ • messages: [...]                  │
│ • buffer_memory: ConvMem(...)      │
│ • vector_memory: VecMem(...)       │
│ • agent: RAGAgent(...)             │
│                                    │
│ Lifetime: Until browser close      │
│ Storage: Server RAM                │
└────────────────────────────────────┘

Multiple Users (Different Sessions):
┌────────────────┐  ┌────────────────┐  ┌────────────────┐
│ User A         │  │ User B         │  │ User C         │
│ Session: xyz   │  │ Session: def   │  │ Session: ghi   │
│                │  │                │  │                │
│ Own messages   │  │ Own messages   │  │ Own messages   │
│ Own memories   │  │ Own memories   │  │ Own memories   │
│ Own agent      │  │ Own agent      │  │ Own agent      │
└────────────────┘  └────────────────┘  └────────────────┘

Each session is isolated and independent.


RESPONSE RENDERING
------------------

Simple Text Response:
┌────────────────────────────────────┐
│ 🤖 Assistant                       │
│                                    │
│ New York office has the highest    │
│ revenue at $85.5M.                 │
└────────────────────────────────────┘

Response with Metadata:
┌────────────────────────────────────┐
│ 🤖 Assistant                       │
│                                    │
│ New York office has the highest    │
│ revenue at $85.5M.                 │
│                                    │
│ ▼ Details                          │
│ ┌────────────────────────────────┐ │
│ │ Classification: document       │ │
│ │ Confidence: 0.95               │ │
│ │ Source: offices.pdf (chunk 001)│ │
│ │ Processing Time: 3.2s          │ │
│ │ Memory Used: Buffer + Vector   │ │
│ └────────────────────────────────┘ │
└────────────────────────────────────┘

Response with Source Attribution:
┌────────────────────────────────────┐
│ 🤖 Assistant                       │
│                                    │
│ Based on the retrieved documents:  │
│                                    │
│ New York office has the highest    │
│ revenue at $85.5M.                 │
│                                    │
│ 📄 Sources:                        │
│ • offices.pdf, page 1              │
│ • Similarity: 0.92                 │
└────────────────────────────────────┘


PERFORMANCE OPTIMIZATIONS
--------------------------

1. SESSION STATE CACHING
   - Agent instance created once per session
   - Memory objects persist across interactions
   - Avoid repeated initialization

2. LAZY LOADING
   - Load vector DB only when needed
   - Initialize models on first query
   - Cache embeddings

3. ASYNC OPERATIONS (if enabled)
   - Concurrent classification + memory retrieval
   - Non-blocking UI updates
   - Background memory storage

4. RESPONSE STREAMING
   - Stream LLM responses token-by-token
   - Update UI in real-time
   - Better perceived performance


COMPARISON: CLI VS WEB UI
--------------------------

Aspect              CLI (Lab 7)         Web UI (Lab 8)
──────              ───────────         ──────────────
Interface           Text-based          Graphical
Accessibility       Terminal only       Browser-based
Multi-user          No                  Yes (sessions)
Memory visibility   Limited             Dashboard
History             Not persistent      Session-based
Ease of use         Technical users     All users
Deployment          Local only          Can deploy online


KEY LEARNING POINTS
-------------------

1. WEB UI FRAMEWORKS
   - Streamlit for rapid prototyping
   - Session state management
   - Component-based UI

2. SESSION MANAGEMENT
   - Per-user state isolation
   - Session persistence
   - Memory lifecycle

3. UI/UX DESIGN
   - Chat interface pattern
   - Memory dashboard
   - Settings sidebar

4. INTEGRATION
   - Backend agent + Frontend UI
   - State synchronization
   - Real-time updates


LIMITATIONS
-----------

- Session state not persistent (lost on restart)
- Single-server (not horizontally scalable)
- No authentication/authorization
- Limited to Streamlit's UI components
- Memory limited to server RAM


USE CASES
---------

✓ Internal company chatbots
✓ Research assistants with UI
✓ Document Q&A applications
✓ Customer support interfaces
✓ Prototyping AI applications


NEXT STEPS
----------

Lab 9: Deploy to Hugging Face Spaces for public access
       Add authentication and persistence

================================================================================
