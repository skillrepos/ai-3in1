================================================================================
LAB 3 ARCHITECTURE: Exploring MCP (Model Context Protocol)
================================================================================

OVERVIEW
--------
Introduces MCP as a standardized protocol for agent-tool communication,
separating tool implementation from agent logic using a client-server model.


SYSTEM ARCHITECTURE
-------------------

CLIENT SIDE                    NETWORK              SERVER SIDE :8000
───────────                    ───────              ──────────────────

┌──────────────┐                                   ┌──────────────────┐
│    AGENT     │                                   │   MCP SERVER     │
│  agent_mcp   │                                   │  mcp_server.py   │
│              │                                   │                  │
│  ┌────────┐  │                                   │  ┌────────────┐  │
│  │ Logic  │  │                                   │  │ Tool       │  │
│  │ & LLM  │  │                                   │  │ Registry   │  │
│  └────┬───┘  │                                   │  └──────┬─────┘  │
│       │      │                                   │         │        │
│       ▼      │                                   │         ▼        │
│  ┌────────┐  │     HTTP :8000                    │  ┌────────────┐  │
│  │ MCP    │◄─┼──────────────────────────────────►│  │ FastMCP    │  │
│  │ Client │  │     POST /mcp/call                │  │ Server     │  │
│  └────────┘  │     GET /mcp/tools                │  └──────┬─────┘  │
│              │                                   │         │        │
└──────────────┘                                   │         ▼        │
                                                   │  ┌────────────┐  │
                                                   │  │@mcp.tool() │  │
                                                   │  ├────────────┤  │
                                                   │  │get_weather │  │
                                                   │  └──────┬─────┘  │
                                                   │         │        │
                                                   │         ▼        │
                                                   │  ┌────────────┐  │
                                                   │  │@mcp.tool() │  │
                                                   │  ├────────────┤  │
                                                   │  │convert_    │  │
                                                   │  │c_to_f      │  │
                                                   │  └────────────┘  │
                                                   └──────────────────┘
                                                            │
                                                            ▼
                                                   ┌──────────────────┐
                                                   │  Open-Meteo API  │
                                                   └──────────────────┘


MCP PROTOCOL FLOW
-----------------

Step 1: TOOL DISCOVERY

Agent                    MCP Client              MCP Server
─────                    ──────────              ──────────

Start ──────────▶ GET /mcp/tools ──────────────▶ Query registry
                                                        │
                                                        ▼
                                                 Return tool list:
                                                 {
                                                   "tools": [
                                                     "get_weather",
                                                     "convert_c_to_f"
                                                   ]
                                                 }
                                                        │
                  ◀─────────────────────────────────────┘
Display tools
available


Step 2: TOOL EXECUTION

Agent                    MCP Client              MCP Server              Tool
─────                    ──────────              ──────────              ────

Call tool ──────▶ POST /mcp/call ─────────────▶ Route to tool ──────▶ Execute
"get_weather"    {                               "get_weather"          │
                   "tool": "get_weather",                               │
                   "args": {lat: 48, lon: 2}                            │
                 }                                                      │
                                                                        ▼
                                                                   Call API
                                                                        │
                                                                        ▼
                  ◀─────────────────────────────── Return result ◀─── Result
                  CallToolResult                  {temp: 22, ...}
                  {data: {...}}


MCP TOOL REGISTRATION
---------------------

Server Code (mcp_server.py):

from fastmcp import FastMCP

mcp = FastMCP("Weather Tools")

@mcp.tool()
def get_weather(lat: float, lon: float) -> dict:
    """
    Get weather forecast for coordinates.
    
    Args:
        lat: Latitude (-90 to 90)
        lon: Longitude (-180 to 180)
    
    Returns:
        Weather data dictionary
    """
    # Implementation
    api_url = "https://api.open-meteo.com/v1/forecast"
    # ... fetch and return data
    return weather_data


@mcp.tool()
def convert_c_to_f(c: float) -> float:
    """Convert Celsius to Fahrenheit"""
    return c * 9 / 5 + 32


Tool Registry (automatic):
┌────────────────────────────────────────┐
│ REGISTERED TOOLS                       │
├────────────────────────────────────────┤
│ Tool: get_weather                      │
│   Args: lat (float), lon (float)       │
│   Description: Get weather forecast... │
│   Endpoint: /mcp/call                  │
│                                        │
│ Tool: convert_c_to_f                   │
│   Args: c (float)                      │
│   Description: Convert Celsius...      │
│   Endpoint: /mcp/call                  │
└────────────────────────────────────────┘


CLIENT CODE
-----------

Agent Code (agent_mcp.py):

from fastmcp import Client

async def main():
    # Connect to MCP server
    async with Client("http://127.0.0.1:8000/mcp/") as mcp:
        
        # Call tool through MCP
        result = await mcp.call_tool(
            "get_weather",
            {"lat": 48.8566, "lon": 2.3522}
        )
        
        weather_data = unwrap(result)
        print(f"Weather: {weather_data}")


NETWORK PROTOCOL
----------------

Request: TOOL CALL
┌────────────────────────────────────────────────────┐
│ POST http://127.0.0.1:8000/mcp/call               │
│ Content-Type: application/json                     │
│                                                    │
│ {                                                  │
│   "tool": "get_weather",                           │
│   "arguments": {                                   │
│     "lat": 48.8566,                                │
│     "lon": 2.3522                                  │
│   }                                                │
│ }                                                  │
└────────────────────────────────────────────────────┘

Response: TOOL RESULT
┌────────────────────────────────────────────────────┐
│ HTTP/1.1 200 OK                                    │
│ Content-Type: application/json                     │
│                                                    │
│ {                                                  │
│   "result": {                                      │
│     "temperature": 22,                             │
│     "conditions": "Clear sky",                     │
│     "weather_code": 0                              │
│   }                                                │
│ }                                                  │
└────────────────────────────────────────────────────┘


COMPARISON: LAB 2 VS LAB 3
---------------------------

LAB 2: Direct Tool Calling
┌──────────────────────────┐
│       AGENT              │
│  ┌─────────────────┐     │
│  │ Agent Logic     │     │
│  └────────┬────────┘     │
│           │              │
│  ┌────────▼────────┐     │
│  │ get_weather()   │────┼───▶ API
│  └─────────────────┘     │
│           │              │
│  ┌────────▼────────┐     │
│  │ convert_c_to_f()│     │
│  └─────────────────┘     │
└──────────────────────────┘

✗ Tools tightly coupled
✗ Hard to share tools
✗ No standardization


LAB 3: MCP Protocol
┌──────────────┐         ┌──────────────────┐
│    AGENT     │         │   MCP SERVER     │
│ ┌──────────┐ │   MCP   │  ┌────────────┐  │
│ │  Logic   │ │ Protocol│  │ get_weather│──┼─▶ API
│ └────┬─────┘ │◄───────►│  └────────────┘  │
│      │       │         │  ┌────────────┐  │
│ ┌────▼────┐  │         │  │ convert    │  │
│ │ Client  │  │         │  │ _c_to_f    │  │
│ └─────────┘  │         │  └────────────┘  │
└──────────────┘         └──────────────────┘

✓ Tools separated
✓ Can serve multiple agents
✓ Standardized protocol


KEY ADVANTAGES OF MCP
---------------------

1. SEPARATION OF CONCERNS
   Agent focuses on:        Server focuses on:
   - Reasoning              - Tool implementation
   - Decision making        - API integration
   - Response formatting    - Data transformation

2. REUSABILITY
   ┌────────┐
   │Agent 1 │──┐
   └────────┘  │
               ├───▶ ┌────────────┐
   ┌────────┐  │     │ MCP Server │
   │Agent 2 │──┤     │  (shared)  │
   └────────┘  │     └────────────┘
               │
   ┌────────┐  │
   │Agent 3 │──┘
   └────────┘

3. STANDARDIZATION
   - Consistent tool interface
   - Version management
   - Documentation auto-generated
   - Type safety

4. SCALABILITY
   - Add tools without changing agents
   - Update tools independently
   - Deploy tools separately


PERFORMANCE CHARACTERISTICS
----------------------------

Metric                  Lab 2 (Direct)   Lab 3 (MCP)
──────                  ──────────────   ───────────
Tool call latency       0ms              10-50ms (HTTP)
Network dependency      No               Yes (local)
Setup complexity        Low              Medium
Tool isolation          No               Yes
Multi-agent support     No               Yes


PROCESSES RUNNING
-----------------

Terminal 1:
$ python mcp_server.py
INFO: MCP server running on http://127.0.0.1:8000
INFO: Tools registered: get_weather, convert_c_to_f
INFO: Ready to accept connections

Terminal 2:
$ python agent_mcp.py
User: Paris weather?
[Connecting to MCP server...]
[Calling get_weather via MCP...]
[Result: 72°F, Clear]


KEY LEARNING POINTS
-------------------

1. PROTOCOL STANDARDIZATION
   - MCP defines how agents talk to tools
   - Like HTTP for agent-tool communication
   - Language agnostic

2. CLIENT-SERVER PATTERN
   - Agent = client
   - Tools = server
   - HTTP as transport

3. DECORATOR PATTERN
   - @mcp.tool() registers functions
   - Auto-generates API endpoints
   - Type checking from signatures

4. TOOL DISCOVERY
   - Agents query available tools
   - Dynamic registration
   - Self-documenting


LIMITATIONS
-----------

- Network latency overhead
- Requires server to be running
- More complex deployment
- Single point of failure (server)


NEXT STEPS
----------

Lab 4: Add vector database for semantic search
Lab 5: Combine MCP with RAG for knowledge-grounded agents

================================================================================
