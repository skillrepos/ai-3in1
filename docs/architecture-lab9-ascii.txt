================================================================================
LAB 9 ARCHITECTURE: Hugging Face Cloud Deployment
================================================================================

OVERVIEW
--------
Deploys the Streamlit RAG agent to Hugging Face Spaces for public cloud access,
transforming a local application into a scalable, shareable web service.


SYSTEM ARCHITECTURE
-------------------

LOCAL DEVELOPMENT              HUGGING FACE CLOUD
──────────────────             ──────────────────

┌──────────────────┐           ┌──────────────────────────────────────┐
│  DEVELOPER       │           │  HUGGING FACE SPACES                 │
│  ENVIRONMENT     │           │                                      │
│                  │           │  ┌────────────────────────────────┐  │
│ ┌──────────────┐ │   Git     │  │  CONTAINER RUNTIME             │  │
│ │ Source Code  │─┼──Push────►│  │  (Docker)                      │  │
│ └──────────────┘ │           │  │                                │  │
│                  │           │  │  ┌──────────────────────────┐  │  │
│ ┌──────────────┐ │           │  │  │ Python Environment       │  │  │
│ │requirements  │─┼──────────►│  │  │ - streamlit              │  │  │
│ │.txt          │ │           │  │  │ - langchain-ollama       │  │  │
│ └──────────────┘ │           │  │  │ - chromadb               │  │  │
│                  │           │  │  │ - sentence-transformers  │  │  │
│ ┌──────────────┐ │           │  │  └──────────────────────────┘  │  │
│ │ README.md    │─┼──────────►│  │               │                │  │
│ │ (metadata)   │ │           │  │               ▼                │  │
│ └──────────────┘ │           │  │  ┌──────────────────────────┐  │  │
│                  │           │  │  │ streamlit_app.py         │  │  │
└──────────────────┘           │  │  │ (Application Entry)      │  │  │
                               │  │  └────────────┬─────────────┘  │  │
                               │  │               │                │  │
                               │  │               ▼                │  │
                               │  │  ┌──────────────────────────┐  │  │
                               │  │  │ RAG Agent Stack          │  │  │
                               │  │  │ - Classification         │  │  │
                               │  │  │ - Vector Search          │  │  │
                               │  │  │ - Memory System          │  │  │
                               │  │  └────────────┬─────────────┘  │  │
                               │  └───────────────┼────────────────┘  │
                               │                  │                   │
                               │                  ▼                   │
                               │  ┌────────────────────────────────┐  │
                               │  │  PERSISTENT STORAGE            │  │
                               │  │  - ChromaDB data               │  │
                               │  │  - Session state               │  │
                               │  └────────────────────────────────┘  │
                               │                  │                   │
                               │                  ▼                   │
                               │  ┌────────────────────────────────┐  │
                               │  │  PUBLIC ENDPOINT               │  │
                               │  │  https://huggingface.co/       │  │
                               │  │  spaces/username/rag-agent     │  │
                               │  └────────────────────────────────┘  │
                               └──────────────────────────────────────┘
                                                  ▲
                                                  │ HTTPS
                                                  │
                                         ┌────────┴────────┐
                                         │  PUBLIC USERS   │
                                         │  (Web Browsers) │
                                         └─────────────────┘


DEPLOYMENT WORKFLOW
-------------------

Step 1: Prepare Application
┌────────────────────────────────────┐
│ 1. Test locally                    │
│    $ streamlit run streamlit_app.py│
│                                    │
│ 2. Verify all dependencies         │
│    $ pip list                      │
│                                    │
│ 3. Create requirements.txt         │
│    streamlit==1.28.0               │
│    langchain-ollama==0.1.0         │
│    chromadb==0.4.18                │
│    sentence-transformers==2.2.2    │
│    ...                             │
└────────────┬───────────────────────┘
             │
             ▼
Step 2: Create Space on Hugging Face
┌────────────────────────────────────┐
│ 1. Go to huggingface.co/new-space  │
│                                    │
│ 2. Choose:                         │
│    - Name: rag-agent               │
│    - Type: Streamlit               │
│    - Visibility: Public/Private    │
│    - Hardware: CPU basic (free)    │
│                                    │
│ 3. Get Git repository URL          │
└────────────┬───────────────────────┘
             │
             ▼
Step 3: Push Code to Space
┌────────────────────────────────────┐
│ $ git clone https://huggingface.co│
│   /spaces/username/rag-agent       │
│                                    │
│ $ cd rag-agent                     │
│ $ cp streamlit_app.py .            │
│ $ cp requirements.txt .            │
│ $ cp -r memory/ .                  │
│ $ cp -r data/ .                    │
│                                    │
│ $ git add .                        │
│ $ git commit -m "Initial deploy"   │
│ $ git push                         │
└────────────┬───────────────────────┘
             │
             ▼
Step 4: Automatic Build & Deploy
┌────────────────────────────────────┐
│ Hugging Face:                      │
│ 1. Detects push                    │
│ 2. Builds Docker container         │
│ 3. Installs dependencies           │
│ 4. Starts Streamlit app            │
│ 5. Assigns public URL              │
│                                    │
│ Status: ✓ Running                  │
└────────────┬───────────────────────┘
             │
             ▼
Step 5: Public Access
┌────────────────────────────────────┐
│ Application live at:               │
│ https://huggingface.co/spaces/     │
│        username/rag-agent          │
│                                    │
│ Users can:                         │
│ • Access via browser               │
│ • No installation needed           │
│ • Full functionality               │
└────────────────────────────────────┘


HUGGING FACE SPACES FILE STRUCTURE
-----------------------------------

Repository Layout:
┌────────────────────────────────────┐
│ rag-agent/                         │
│ ├── .git/                          │
│ ├── README.md           ← Metadata │
│ ├── requirements.txt    ← Deps     │
│ ├── streamlit_app.py    ← Entry    │
│ ├── app_gradio.py       ← Alt UI   │
│ ├── rag_agent2_canonical.py        │
│ ├── mcp_server_canonical.py        │
│ ├── memory/                        │
│ │   ├── __init__.py               │
│ │   ├── conversation_memory.py    │
│ │   └── vector_memory.py          │
│ ├── data/                          │
│ │   └── offices.csv               │
│ ├── chroma_db/          ← Persist  │
│ │   └── (auto-created)            │
│ └── .gitignore                     │
└────────────────────────────────────┘


README.md METADATA
------------------

Key Front Matter (YAML):
┌────────────────────────────────────────────────────────────┐
│ ---                                                        │
│ title: Intelligent RAG Agent                               │
│ emoji: 🤖                                                   │
│ colorFrom: blue                                            │
│ colorTo: purple                                            │
│ sdk: streamlit                                             │
│ sdk_version: 1.28.0                                        │
│ app_file: streamlit_app.py                                 │
│ pinned: false                                              │
│ ---                                                        │
│                                                            │
│ # Intelligent RAG Agent                                    │
│                                                            │
│ A conversational AI agent combining:                       │
│ - Query classification                                     │
│ - RAG (Retrieval-Augmented Generation)                     │
│ - Dual memory system (buffer + vector)                     │
│                                                            │
│ ## Features                                                │
│ - Document-grounded Q&A                                    │
│ - Real-time weather lookup                                 │
│ - Context-aware conversations                              │
│ - Memory dashboard                                         │
└────────────────────────────────────────────────────────────┘


HARDWARE OPTIONS
----------------

┌──────────────────────────────────────────────────────────────┐
│ Hugging Face Spaces Hardware Tiers                          │
├──────────────────────────────────────────────────────────────┤
│                                                              │
│ Tier          CPU    RAM     GPU     Cost/hour    Use Case  │
│ ────          ───    ───     ───     ─────────    ────────  │
│                                                              │
│ CPU Basic     2      16 GB   None    FREE         Dev/Demo  │
│ CPU Upgrade   8      32 GB   None    $0.03        Production│
│ T4 Small      4      16 GB   T4      $0.60        LLM Inf.  │
│ A10G Small    4      32 GB   A10G    $1.05        Fast LLM  │
│ A100 Large    12     142 GB  A100    $4.13        Heavy LLM │
│                                                              │
└──────────────────────────────────────────────────────────────┘

Recommended for RAG Agent:
- Development: CPU Basic (FREE)
- Production: CPU Upgrade ($0.03/hour)
- With LLM: T4 Small ($0.60/hour) if running local LLM


ENVIRONMENT ADAPTATIONS
-----------------------

Local vs Cloud Differences:

1. MODEL LOADING
   Local:
   ┌────────────────────────────────────┐
   │ llm = ChatOllama(                  │
   │     model="llama3.2",              │
   │     base_url="http://localhost:    │
   │                11434"              │
   │ )                                  │
   └────────────────────────────────────┘

   Cloud (if Ollama not available):
   ┌────────────────────────────────────┐
   │ from langchain_huggingface import  │
   │     HuggingFaceEndpoint            │
   │                                    │
   │ llm = HuggingFaceEndpoint(         │
   │     repo_id="meta-llama/Llama-2-   │
   │                7b-chat-hf",        │
   │     huggingfacehub_api_token=token │
   │ )                                  │
   └────────────────────────────────────┘

2. STORAGE PATHS
   Local:
   ┌────────────────────────────────────┐
   │ chroma_client = chromadb.          │
   │     PersistentClient(              │
   │         path="./chroma_db"         │
   │     )                              │
   └────────────────────────────────────┘

   Cloud (same, but note persistence):
   ┌────────────────────────────────────┐
   │ # Files persist in Space storage   │
   │ chroma_client = chromadb.          │
   │     PersistentClient(              │
   │         path="./chroma_db"         │
   │     )                              │
   └────────────────────────────────────┘

3. SECRETS MANAGEMENT
   Local:
   ┌────────────────────────────────────┐
   │ API_KEY = "sk-..."                 │
   │ # Hardcoded or .env file           │
   └────────────────────────────────────┘

   Cloud:
   ┌────────────────────────────────────┐
   │ import streamlit as st             │
   │ API_KEY = st.secrets["API_KEY"]    │
   │ # Stored in Space settings         │
   └────────────────────────────────────┘


PERSISTENCE STRATEGY
--------------------

┌──────────────────────────────────────────────────────────────┐
│ DATA PERSISTENCE IN HUGGING FACE SPACES                      │
├──────────────────────────────────────────────────────────────┤
│                                                              │
│ Persistent (Survives Rebuilds):                              │
│ ✓ Files committed to Git                                    │
│ ✓ ChromaDB data (if in git)                                 │
│ ✓ Uploaded documents (if in git)                            │
│                                                              │
│ Ephemeral (Lost on Rebuild):                                │
│ ✗ Session state (user sessions)                             │
│ ✗ In-memory data structures                                 │
│ ✗ Temporary files                                            │
│                                                              │
│ Strategies:                                                  │
│ 1. Pre-index documents, commit chroma_db/ to git             │
│ 2. Use external database (Firebase, Supabase) for           │
│    persistent user data                                      │
│ 3. Rebuild index on startup if needed                        │
└──────────────────────────────────────────────────────────────┘


STARTUP SCRIPT EXAMPLE
----------------------

streamlit_app.py (Cloud-optimized):

import streamlit as st
import os
from pathlib import Path

# Initialize on first run
if "initialized" not in st.session_state:
    st.session_state.initialized = False

def initialize_app():
    """Initialize app components on first load"""

    # Check if ChromaDB exists
    chroma_path = Path("./chroma_db")

    if not chroma_path.exists():
        st.info("First-time setup: Indexing documents...")

        # Index documents
        from tools.index_csv import index_csv_file
        index_csv_file("data/offices.csv")

        st.success("Indexing complete!")

    # Initialize memories
    st.session_state.buffer_memory = ConversationMemory()
    st.session_state.vector_memory = VectorMemory()

    # Initialize agent
    st.session_state.agent = RAGAgent(...)

    st.session_state.initialized = True

# Run initialization
if not st.session_state.initialized:
    initialize_app()

# Rest of Streamlit app
st.title("🤖 RAG Agent")
...


MONITORING & LOGS
-----------------

Hugging Face Spaces Dashboard:

┌──────────────────────────────────────────────────────────────┐
│ Space: username/rag-agent                     Status: Running │
├──────────────────────────────────────────────────────────────┤
│                                                              │
│ Metrics:                                                     │
│ ┌────────────────┐  ┌────────────────┐  ┌────────────────┐  │
│ │ Active Users   │  │ Total Requests │  │ Avg Response   │  │
│ │      12        │  │      1,543     │  │     3.2s       │  │
│ └────────────────┘  └────────────────┘  └────────────────┘  │
│                                                              │
│ Logs (Live):                                                 │
│ ┌──────────────────────────────────────────────────────────┐ │
│ │ [INFO] Streamlit app started                            │ │
│ │ [INFO] Initializing ChromaDB...                         │ │
│ │ [INFO] Loaded 50 document chunks                        │ │
│ │ [INFO] Agent initialized                                │ │
│ │ [INFO] User query: "What's the weather in Paris?"       │ │
│ │ [INFO] Classification: weather (0.98 confidence)        │ │
│ │ [INFO] Response generated in 3.2s                       │ │
│ └──────────────────────────────────────────────────────────┘ │
│                                                              │
│ Actions:                                                     │
│ [Restart Space]  [View Logs]  [Settings]  [Delete]          │
└──────────────────────────────────────────────────────────────┘


USER EXPERIENCE
---------------

Public Access Flow:

1. User visits URL
   https://huggingface.co/spaces/username/rag-agent

2. Space loads in browser
   ┌────────────────────────────────────┐
   │ Loading Space...                   │
   │ [████████░░] 80%                   │
   └────────────────────────────────────┘

3. Streamlit app appears
   ┌────────────────────────────────────┐
   │ 🤖 Intelligent RAG Agent           │
   │                                    │
   │ Chat interface ready               │
   │ Memory: 0/5 exchanges              │
   │                                    │
   │ Type your message...         [Send]│
   └────────────────────────────────────┘

4. User interacts normally
   - Same UI as local
   - Same functionality
   - Isolated session


COST ESTIMATION
---------------

Example: 100 users/day, 10 queries each

Free Tier (CPU Basic):
┌────────────────────────────────────┐
│ Hardware: FREE                     │
│ Bandwidth: FREE (HF included)      │
│ Storage: FREE (< 50GB)             │
│                                    │
│ Total: $0/month                    │
└────────────────────────────────────┘

Paid Tier (CPU Upgrade for better performance):
┌────────────────────────────────────┐
│ Hardware: $0.03/hour               │
│ Usage: 24h × 30 days = 720 hours   │
│                                    │
│ Total: $21.60/month                │
└────────────────────────────────────┘

With API LLM (HuggingFace Inference):
┌────────────────────────────────────┐
│ Hardware: FREE (CPU Basic)         │
│ API calls: 1000 queries/day        │
│ Rate: $0.0001/query (example)      │
│                                    │
│ Total: $3/month + hardware         │
└────────────────────────────────────┘


COMPARISON: LOCAL VS CLOUD
---------------------------

Aspect              Local (Lab 8)       Cloud (Lab 9)
──────              ─────────────       ─────────────
Accessibility       Localhost only      Public URL
Setup               Manual              Automated
Scaling             Single machine      Managed
Persistence         Local storage       Git + storage
Cost                Hardware owned      Usage-based
Sharing             Not possible        Easy (URL)
Maintenance         Self-managed        HF-managed
Uptime              When running        24/7 (if paid)


LIMITATIONS
-----------

- Cold start latency (first load slower)
- CPU tier limits processing speed
- Session state not shared across users
- Rebuild required for code changes
- Storage limited (depends on tier)
- No custom domain on free tier


ALTERNATIVES TO HUGGING FACE
-----------------------------

Platform          Pros                  Cons
────────          ────                  ────
Streamlit Cloud   Native Streamlit      Limited free tier
Railway           Easy deploy           Paid only
Render            Good free tier        Complex setup
AWS/GCP/Azure     Full control          High complexity
Heroku            Simple                Paid tiers


KEY LEARNING POINTS
-------------------

1. CLOUD DEPLOYMENT
   - Git-based deployment
   - Container orchestration
   - Public accessibility

2. PLATFORM SERVICES
   - Managed infrastructure
   - Automatic scaling
   - Built-in monitoring

3. PERSISTENCE
   - Git for code + data
   - External DBs for dynamic data
   - Rebuild strategies

4. PRODUCTION READINESS
   - Environment adaptations
   - Secret management
   - Error handling


USE CASES
---------

✓ Public AI demos
✓ Portfolio projects
✓ Research prototypes
✓ Startup MVPs
✓ Educational tools
✓ Client presentations


NEXT STEPS
----------

Enhancements:
• Add user authentication
• Implement rate limiting
• Connect external vector DB
• Add analytics tracking
• Custom domain setup
• Multi-modal inputs (images, audio)

================================================================================
