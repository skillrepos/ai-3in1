================================================================================
LAB 6 ARCHITECTURE: Classification MCP Server with Vector Database
================================================================================

OVERVIEW
--------
Lab 6 transforms the MCP server to provide:
1. Canonical query classification (keyword-based matching)
2. Prompt template management
3. Vector database for semantic search (ChromaDB)
4. Dual data sources: CSV (structured) + PDF (embedded)

This creates a centralized data layer where the MCP server owns both
structured data and vector embeddings.


SYSTEM ARCHITECTURE
-------------------

CLIENT SIDE                    NETWORK              SERVER SIDE :8000
───────────                    ───────              ──────────────────

┌──────────────┐                                   ┌──────────────────────┐
│    AGENT     │                                   │ CLASSIFICATION MCP   │
│  agent.py    │                                   │ SERVER               │
│              │                                   │                      │
│  ┌────────┐  │                                   │  ┌────────────────┐  │
│  │ LLM    │  │                                   │  │ Initialization │  │
│  │Execute │  │                                   │  │ (on startup)   │  │
│  └────┬───┘  │                                   │  │ 1. Load        │  │
│       │      │                                   │  │    Embedding   │  │
│       ▼      │                                   │  │    Model       │  │
│  ┌────────┐  │     HTTP :8000                    │  │ 2. Init        │  │
│  │ MCP    │◄─┼──────────────────────────────────►│  │    ChromaDB    │  │
│  │ Client │  │     POST /mcp/call                │  │ 3. Populate    │  │
│  └────────┘  │     GET /mcp/tools                │  │    Collections │  │
│              │                                   │  └────────┬───────┘  │
└──────────────┘                                   │           │          │
                                                   │           ▼          │
                                                   │  ┌────────────────┐  │
                                                   │  │ VECTOR DB      │  │
                                                   │  │ (ChromaDB)     │  │
                                                   │  │ ./mcp_chroma_db│  │
                                                   │  ├────────────────┤  │
                                                   │  │ Collections:   │  │
                                                   │  │ • office_      │  │
                                                   │  │   locations    │  │
                                                   │  │   (PDF data)   │  │
                                                   │  │ • office_      │  │
                                                   │  │   analytics    │  │
                                                   │  │   (CSV data)   │  │
                                                   │  └────────┬───────┘  │
                                                   │           │          │
                                                   │           ▼          │
                                                   │  ┌────────────────┐  │
                                                   │  │ MCP TOOLS      │  │
                                                   │  ├────────────────┤  │
                                                   │  │ • classify_    │  │
                                                   │  │   canonical_   │  │
                                                   │  │   query        │  │
                                                   │  │ • get_query_   │  │
                                                   │  │   template     │  │
                                                   │  │ • get_filtered_│  │
                                                   │  │   office_data  │  │
                                                   │  │ • vector_      │  │
                                                   │  │   search_      │  │
                                                   │  │   locations    │  │
                                                   │  │ • vector_      │  │
                                                   │  │   search_      │  │
                                                   │  │   analytics    │  │
                                                   │  │ • get_weather  │  │
                                                   │  │ • geocode_     │  │
                                                   │  │   location     │  │
                                                   │  └────────────────┘  │
                                                   └──────────────────────┘


VECTOR DATABASE ARCHITECTURE (NEW!)
------------------------------------

Data Flow: File → Embedding → ChromaDB

┌─────────────────────────────────────────────────────────┐
│ STARTUP INITIALIZATION (Server)                         │
├─────────────────────────────────────────────────────────┤
│                                                          │
│  Step 1: Load Embedding Model                           │
│  ┌────────────────────────────────────────────┐         │
│  │ SentenceTransformer("all-MiniLM-L6-v2")    │         │
│  │ - 384-dimensional vectors                  │         │
│  │ - Semantic similarity via cosine distance  │         │
│  └────────────────────────────────────────────┘         │
│                                                          │
│  Step 2: Initialize ChromaDB                            │
│  ┌────────────────────────────────────────────┐         │
│  │ PersistentClient(path="./mcp_chroma_db")   │         │
│  │ - Persistent storage on disk               │         │
│  │ - Survives server restarts                 │         │
│  └────────────────────────────────────────────┘         │
│                                                          │
│  Step 3a: Populate Locations Collection                 │
│  ┌────────────────────────────────────────────┐         │
│  │ Source: data/offices.pdf                   │         │
│  │ ├─ Extract lines with pdfplumber           │         │
│  │ ├─ Embed each line → vector                │         │
│  │ └─ Store in office_locations collection    │         │
│  │                                             │         │
│  │ Example document:                           │         │
│  │ "Paris Office, 88 Champs-Élysées, ..."     │         │
│  │ → [0.12, -0.45, 0.78, ...] (384 dims)      │         │
│  └────────────────────────────────────────────┘         │
│                                                          │
│  Step 3b: Populate Analytics Collection                 │
│  ┌────────────────────────────────────────────┐         │
│  │ Source: data/offices.csv                   │         │
│  │ ├─ Read rows with Pandas                   │         │
│  │ ├─ Create descriptive text per row         │         │
│  │ ├─ Embed text → vector                     │         │
│  │ └─ Store in office_analytics collection    │         │
│  │                                             │         │
│  │ Example document:                           │         │
│  │ "Chicago office with 95 employees and      │         │
│  │  $52.3M revenue, opened in 2010"           │         │
│  │ → [0.34, 0.12, -0.67, ...] (384 dims)      │         │
│  │ + metadata: {city, employees, revenue, ...}│         │
│  └────────────────────────────────────────────┘         │
│                                                          │
└─────────────────────────────────────────────────────────┘


CANONICAL QUERY WORKFLOW
-------------------------

User Query: "Which office has the most employees?"

    ┌─────────────────────┐
    │ 1. AGENT            │
    │    Receive query    │
    └──────────┬──────────┘
               │
               ▼
    ┌─────────────────────┐
    │ 2. CLASSIFY         │
    │    MCP: classify_   │
    │    canonical_query()│
    │    args: {          │
    │      user_query     │
    │    }                │
    └──────────┬──────────┘
               │
               │ HTTP POST → MCP Server
               │ Keyword matching
               ▼
    ┌─────────────────────┐
    │ 3. MCP RETURNS      │
    │    {                │
    │      suggested:     │
    │        "employee_   │
    │         analysis",  │
    │      confidence:    │
    │        0.85         │
    │    }                │
    └──────────┬──────────┘
               │
               ▼
    ┌─────────────────────┐
    │ 4. GET TEMPLATE     │
    │    MCP: get_query_  │
    │    template()       │
    │    args: {          │
    │      query_name:    │
    │       "employee_    │
    │        analysis"    │
    │    }                │
    └──────────┬──────────┘
               │
               │ HTTP POST → MCP Server
               ▼
    ┌─────────────────────┐
    │ 5. MCP RETURNS      │
    │    {                │
    │      template:      │
    │        "Analyze...", │
    │      data_reqs:     │
    │        ["employees",│
    │         "city"]     │
    │    }                │
    └──────────┬──────────┘
               │
               ▼
    ┌─────────────────────┐
    │ 6. GET DATA         │
    │    MCP: get_        │
    │    filtered_office_ │
    │    data()           │
    │    args: {          │
    │      columns:       │
    │        ["employees",│
    │         "city"]     │
    │    }                │
    └──────────┬──────────┘
               │
               │ HTTP POST → MCP Server
               │ Reads CSV with Pandas
               ▼
    ┌─────────────────────┐
    │ 7. MCP RETURNS      │
    │    {                │
    │      data: [        │
    │        {city: "NY", │
    │         employees:  │
    │           120},     │
    │        ...          │
    │      ]              │
    │    }                │
    └──────────┬──────────┘
               │
               ▼
    ┌─────────────────────┐
    │ 8. AGENT EXECUTES   │
    │    LLM locally:     │
    │    prompt = template│
    │      .format(data)  │
    │                     │
    │    LLM analyzes     │
    │    and responds     │
    └──────────┬──────────┘
               │
               ▼
    ┌─────────────────────┐
    │ 9. FINAL ANSWER     │
    │   "New York office  │
    │    has the most     │
    │    employees: 120"  │
    └─────────────────────┘


VECTOR SEARCH WORKFLOW (NEW!)
------------------------------

User Query: "What's the weather at HQ?"

    ┌─────────────────────┐
    │ 1. AGENT            │
    │    Detect weather   │
    │    query keyword    │
    └──────────┬──────────┘
               │
               ▼
    ┌─────────────────────┐
    │ 2. VECTOR SEARCH    │
    │    MCP: vector_     │
    │    search_locations │
    │    args: {          │
    │      query: "HQ",   │
    │      top_k: 5       │
    │    }                │
    └──────────┬──────────┘
               │
               │ HTTP POST → MCP Server
               ▼
    ┌─────────────────────────────────────┐
    │ 3. MCP VECTOR SEARCH                │
    │                                     │
    │  a) Embed query "HQ"                │
    │     → [0.23, -0.67, ...] (384 dims) │
    │                                     │
    │  b) ChromaDB cosine similarity      │
    │     search in office_locations      │
    │                                     │
    │  c) Find top 5 most similar docs    │
    └─────────────┬───────────────────────┘
                  │
                  ▼
    ┌─────────────────────────────────────┐
    │ 4. MCP RETURNS MATCHES              │
    │    {                                │
    │      matches: [                     │
    │        {                            │
    │          document: "New York HQ...", │
    │          distance: 0.12,            │
    │          metadata: {...}            │
    │        },                           │
    │        ...                          │
    │      ]                              │
    │    }                                │
    └─────────────┬───────────────────────┘
                  │
                  ▼
    ┌─────────────────────┐
    │ 5. AGENT EXTRACTS   │
    │    Parse coords or  │
    │    city name from   │
    │    top match        │
    └──────────┬──────────┘
               │
               ▼
    ┌─────────────────────┐
    │ 6. GET WEATHER      │
    │    MCP: get_weather │
    │    (lat, lon)       │
    └──────────┬──────────┘
               │
               ▼
    ┌─────────────────────┐
    │ 7. GENERATE SUMMARY │
    │    Agent's LLM      │
    │    creates friendly │
    │    weather summary  │
    └─────────────────────┘


CANONICAL QUERIES DEFINED
--------------------------

The server defines 5 canonical queries:

1. revenue_stats
   - Description: Calculate revenue statistics
   - Parameters: None
   - Data Requirements: ["revenue_million", "city"]
   - Example Queries:
     • "What's the average revenue?"
     • "Which office has the highest revenue?"

2. employee_analysis
   - Description: Analyze employee distribution
   - Parameters: None
   - Data Requirements: ["employees", "city"]
   - Example Queries:
     • "Which office has the most employees?"
     • "Show me employee statistics"

3. efficiency_analysis
   - Description: Calculate revenue per employee
   - Parameters: None
   - Data Requirements: ["revenue_million", "employees", "city"]
   - Example Queries:
     • "Which office is most efficient?"
     • "Show me revenue per employee"

4. growth_analysis
   - Description: Analyze office growth patterns
   - Parameters: [{"name": "year_threshold", "type": "int"}]
   - Data Requirements: ["opened_year", "city", "state"]
   - Example Queries:
     • "What offices opened after 2014?"
     • "Show me growth since 2010"

5. office_profile
   - Description: Detailed profile of specific office
   - Parameters: [{"name": "city", "type": "str"}]
   - Data Requirements: ["city", "state", "employees", "revenue_million", "opened_year"]
   - Example Queries:
     • "Tell me about the Chicago office"
     • "What's the profile of New York?"


KEYWORD-BASED CLASSIFICATION
-----------------------------

Classification Algorithm:

┌─────────────────────────────────────────────────────┐
│ def classify_canonical_query(user_query: str):     │
│                                                     │
│   scores = {}                                       │
│   user_lower = user_query.lower()                  │
│                                                     │
│   for query_name, config in CANONICAL_QUERIES:     │
│     score = 0                                       │
│                                                     │
│     # Check example query overlap                  │
│     for example in config["example_queries"]:      │
│       example_words = set(example.lower().split()) │
│       user_words = set(user_lower.split())         │
│       overlap = len(example_words ∩ user_words)    │
│       if overlap > 0:                              │
│         score += overlap / len(example_words)      │
│                                                     │
│     # Keyword boosting                             │
│     if "revenue" in user_lower and                 │
│        "revenue" in query_name:                    │
│       score += 0.5                                 │
│                                                     │
│     if "employee" in user_lower and                │
│        "employee" in query_name:                   │
│       score += 0.5                                 │
│                                                     │
│     scores[query_name] = score                     │
│                                                     │
│   best = max(scores, key=scores.get)               │
│   confidence = min(scores[best], 1.0)              │
│                                                     │
│   return {                                          │
│     "suggested_query": best,                        │
│     "confidence": confidence                        │
│   }                                                 │
└─────────────────────────────────────────────────────┘


DATA LAYER ARCHITECTURE
-----------------------

MCP Server owns ALL data:

┌─────────────────────────────────────────────────┐
│ DATA SOURCES                                    │
├─────────────────────────────────────────────────┤
│                                                 │
│ 1. Structured Data (CSV)                        │
│    ┌───────────────────────────┐               │
│    │ data/offices.csv          │               │
│    │ ─────────────────────────│               │
│    │ city, state, employees,   │               │
│    │ revenue_million,          │               │
│    │ opened_year               │               │
│    │                           │               │
│    │ Accessed via Pandas       │               │
│    │ Tools:                    │               │
│    │ • get_office_dataset()    │               │
│    │ • get_filtered_office_    │               │
│    │   data()                  │               │
│    └───────────────────────────┘               │
│                                                 │
│ 2. Unstructured Data (PDF)                      │
│    ┌───────────────────────────┐               │
│    │ data/offices.pdf          │               │
│    │ ─────────────────────────│               │
│    │ Office locations, addresses│              │
│    │ coordinates, descriptions │               │
│    │                           │               │
│    │ Accessed via pdfplumber   │               │
│    │ Tools:                    │               │
│    │ • search_office_locations()│              │
│    │   (legacy keyword search) │               │
│    └───────────────────────────┘               │
│                                                 │
│ 3. Vector Embeddings (ChromaDB) - NEW!          │
│    ┌───────────────────────────┐               │
│    │ ./mcp_chroma_db/          │               │
│    │ ─────────────────────────│               │
│    │ Collection 1:             │               │
│    │   office_locations        │               │
│    │   - PDF lines embedded    │               │
│    │   - ~100+ documents       │               │
│    │                           │               │
│    │ Collection 2:             │               │
│    │   office_analytics        │               │
│    │   - CSV rows embedded     │               │
│    │   - ~10 documents         │               │
│    │   - With metadata         │               │
│    │                           │               │
│    │ Tools:                    │               │
│    │ • vector_search_          │               │
│    │   locations()             │               │
│    │ • vector_search_          │               │
│    │   analytics()             │               │
│    └───────────────────────────┘               │
└─────────────────────────────────────────────────┘


MCP TOOLS SUMMARY
-----------------

Classification Tools:
• classify_canonical_query(user_query) → suggested query
• get_query_template(query_name, ...) → template + data_requirements
• validate_query_parameters(query_name, params) → validation result

Data Access Tools:
• get_office_dataset() → complete CSV data
• get_filtered_office_data(columns, filters) → filtered CSV data
• search_office_locations(query) → keyword search in PDF [LEGACY]
• get_all_office_locations() → all PDF locations

Vector Search Tools (NEW!):
• vector_search_locations(query, top_k) → semantic search in PDF
• vector_search_analytics(query, top_k) → semantic search in CSV

Weather Tools (from Lab 3):
• get_weather(lat, lon) → weather data
• geocode_location(name) → coordinates
• convert_c_to_f(c) → temperature conversion


ARCHITECTURE BENEFITS
---------------------

1. CENTRALIZED DATA LAYER
   ✓ MCP server owns all data sources
   ✓ Single source of truth
   ✓ Easier to maintain and update
   ✓ Can serve multiple agents

2. DUAL ACCESS PATTERNS
   ✓ Structured queries → CSV data
   ✓ Semantic queries → Vector search
   ✓ Choose best method per query type

3. SEMANTIC SEARCH CAPABILITY
   ✓ Fuzzy matching ("HQ" → "New York Headquarters")
   ✓ Synonym handling
   ✓ Context-aware similarity

4. INITIALIZATION ON STARTUP
   ✓ Vector DB populated once
   ✓ Fast query-time performance
   ✓ No embedding overhead per query

5. PERSISTENT STORAGE
   ✓ ChromaDB persists to disk
   ✓ No re-embedding after restart
   ✓ Production-ready


COMPARISON: LAB 5 VS LAB 6
---------------------------

Aspect              Lab 5 (RAG)         Lab 6 (Classification + VectorDB)
──────              ───────────         ──────────────────────────────────
Vector DB Location  Agent (local)       MCP Server (centralized)
Data Access         Agent reads files   Agent uses MCP tools
Embeddings          Agent creates       Server creates on startup
Query Types         Weather only        Weather + Analytics
Classification      None                Keyword-based canonical queries
Templates           None                Prompt templates from server
Structured Data     None                CSV via Pandas
Architecture        Monolithic          Microservices-style separation
Reusability         Low                 High (multiple agents)
Latency             Medium              Medium-Low (pre-computed embeddings)


PERFORMANCE CHARACTERISTICS
----------------------------

Metric                      Value
──────                      ─────
Classification latency      10-50 ms (keyword matching)
Vector search latency       50-150 ms (ChromaDB query)
Template retrieval          <10 ms (in-memory lookup)
CSV data retrieval          10-30 ms (Pandas filtering)
Startup time                5-15 seconds (embedding + populate)

Memory usage:
  - Embedding model         ~250 MB
  - ChromaDB                ~50-100 MB
  - Server overhead         ~100 MB
  - Total                   ~400-450 MB

Disk usage:
  - ChromaDB storage        ~10-50 MB (depends on data size)


KEY LEARNING POINTS
-------------------

1. CENTRALIZED DATA LAYER
   - MCP server owns vector database
   - Single source of truth for data
   - Microservices-style architecture

2. DUAL DATA ACCESS
   - Structured (CSV) + Unstructured (PDF)
   - Different tools for different needs
   - Vector embeddings for both

3. SEMANTIC SEARCH
   - Vector embeddings enable fuzzy matching
   - Better than keyword search
   - Cosine similarity for relevance

4. CANONICAL QUERIES
   - Predefined query patterns
   - Keyword-based classification
   - Template-driven LLM execution

5. STARTUP INITIALIZATION
   - Populate vector DB once
   - Fast query performance
   - Persistent storage

6. SEPARATION OF CONCERNS
   - Server: Classification + Templates + Data
   - Client: LLM execution + Formatting
   - Clear boundaries


USE CASES
---------

✓ Business analytics with natural language queries
✓ Multi-source data access (structured + unstructured)
✓ Semantic search over documents
✓ Intelligent query routing
✓ Multi-agent systems with shared data layer
✓ Production RAG with centralized embeddings


NEXT STEPS
----------

Lab 7: Build agent that uses MCP's vector search (no local RAG)
       Demonstrates MCP-centric architecture with clean separation

================================================================================
