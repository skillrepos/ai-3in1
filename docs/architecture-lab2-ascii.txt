================================================================================
LAB 2 ARCHITECTURE: Creating a Simple Agent
================================================================================

OVERVIEW
--------
Introduction to agentic behavior using the TAO (Thought-Action-Observation)
pattern with tool calling capabilities.


SYSTEM ARCHITECTURE
-------------------

                    ┌──────────────────────────────────────────────┐
                    │         AGENT SYSTEM                         │
                    │                                              │
                    │  ┌────────────────────────────────────────┐  │
                    │  │  TAO LOOP (Thought-Action-Observation) │  │
                    │  │                                        │  │
                    │  │  ╔═══════════════════════════════╗     │  │
                    │  │  ║  1. THOUGHT PHASE             ║     │  │
                    │  │  ║                               ║     │  │
                    │  │  ║  ┌─────────────────────────┐  ║     │  │
                    │  │  ║  │ LLM (llama3.2)          │  ║     │  │
                    │  │  ║  │ - Analyze query         │  ║     │  │
                    │  │  ║  │ - Plan actions          │  ║     │  │
                    │  │  ║  │ - Select tool           │  ║     │  │
                    │  │  ║  └─────────────────────────┘  ║     │  │
                    │  │  ╚═══════════════════════════════╝     │  │
                    │  │                ▼                        │  │
                    │  │  ╔═══════════════════════════════╗     │  │
                    │  │  ║  2. ACTION PHASE              ║     │  │
                    │  │  ║                               ║     │  │
                    │  │  ║  ┌──────────────────────────┐ ║     │  │
                    │  │  ║  │ TOOLS                    │ ║     │  │
                    │  │  ║  │                          │ ║     │  │
                    │  │  ║  │ ┌────────────────────┐   │ ║     │  │
                    │  │  ║  │ │ get_weather()      │   │ ║     │  │
                    │  │  ║  │ │ - Open-Meteo API   │   │ ║     │  │
                    │  │  ║  │ └────────────────────┘   │ ║     │  │
                    │  │  ║  │                          │ ║     │  │
                    │  │  ║  │ ┌────────────────────┐   │ ║     │  │
                    │  │  ║  │ │ convert_c_to_f()   │   │ ║     │  │
                    │  │  ║  │ │ - Python function  │   │ ║     │  │
                    │  │  ║  │ └────────────────────┘   │ ║     │  │
                    │  │  ║  └──────────────────────────┘ ║     │  │
                    │  │  ╚═══════════════════════════════╝     │  │
                    │  │                ▼                        │  │
                    │  │  ╔═══════════════════════════════╗     │  │
                    │  │  ║  3. OBSERVATION PHASE         ║     │  │
                    │  │  ║                               ║     │  │
                    │  │  ║  ┌─────────────────────────┐  ║     │  │
                    │  │  ║  │ Process Results         │  ║     │  │
                    │  │  ║  │ - Store observations    │  ║     │  │
                    │  │  ║  │ - Feed back to LLM      │  ║     │  │
                    │  │  ║  └─────────────────────────┘  ║     │  │
                    │  │  ╚═══════════════════════════════╝     │  │
                    │  └────────────────────────────────────────┘  │
                    └──────────────────────────────────────────────┘
                                       ▲
                                       │
                           ┌───────────┴───────────┐
                           │   EXTERNAL APIs        │
                           │   api.open-meteo.com   │
                           └────────────────────────┘


TAO EXECUTION FLOW
------------------

    User Input                    Agent Processing                   Output
    ──────────                    ────────────────                   ──────

    "Weather in    ───────▶  ╔══════════════════════╗
     Paris?"                 ║ THOUGHT              ║
                             ║ LLM analyzes query   ║
                             ║ Needs: coordinates   ║
                             ║ Tool: get_weather    ║
                             ║ Args: lat=48.8, lon=2║
                             ╚══════════════════════╝
                                       │
                                       ▼
                             ╔══════════════════════╗
                             ║ ACTION               ║
                             ║ Call get_weather()   ║
                             ║ with coordinates     ║
                             ╚══════════════════════╝
                                       │
                                       ▼
                             ╔══════════════════════╗
                             ║ OBSERVATION          ║
                             ║ Result: {            ║
                             ║   temp: 22°C         ║
                             ║   conditions: Clear  ║
                             ║ }                    ║
                             ╚══════════════════════╝
                                       │
                                       ▼
                             ╔══════════════════════╗
                             ║ THOUGHT              ║
                             ║ Need Fahrenheit      ║
                             ║ Tool: convert_c_to_f ║
                             ║ Args: c=22           ║
                             ╚══════════════════════╝
                                       │
                                       ▼
                             ╔══════════════════════╗
                             ║ ACTION               ║
                             ║ Call convert_c_to_f()║
                             ╚══════════════════════╝
                                       │
                                       ▼
                             ╔══════════════════════╗
                             ║ OBSERVATION          ║
                             ║ Result: 71.6°F       ║
                             ╚══════════════════════╝
                                       │
                                       ▼
                             ╔══════════════════════╗
                             ║ FINAL RESPONSE       ║ ─────▶  "Paris weather:
                             ║ Format answer        ║         Clear sky, 71.6°F"
                             ╚══════════════════════╝


SYSTEM PROMPT
-------------

┌─────────────────────────────────────────────────────────────┐
│ You are a helpful weather assistant.                        │
│ You have access to two tools:                               │
│                                                             │
│ 1. get_weather(lat, lon) - Returns weather forecast        │
│    Args: {"lat": <latitude>, "lon": <longitude>}           │
│    Returns: {temp_c, conditions, weather_code}             │
│                                                             │
│ 2. convert_c_to_f(c) - Converts Celsius to Fahrenheit      │
│    Args: {"c": <temperature_celsius>}                      │
│    Returns: temperature in Fahrenheit                      │
│                                                             │
│ Use the TAO (Thought-Action-Observation) format:           │
│ - Thought: Your reasoning about what to do                 │
│ - Action: The tool name to call                            │
│ - Args: JSON arguments for the tool                        │
│                                                             │
│ After observations, provide a final friendly answer.       │
└─────────────────────────────────────────────────────────────┘


DETAILED EXECUTION SEQUENCE
----------------------------

Step  Component       Action                           Data
────  ─────────       ──────                           ────

 1    User            Input query                      "Weather in Paris?"

 2    Agent           Send to LLM with system prompt

 3    LLM             Reasoning (Thought phase)        "Need coordinates"
                                                       "Use get_weather"

 4    Agent           Parse LLM output                 Tool: get_weather
                                                       Args: {lat: 48.8, lon: 2}

 5    Tool            Call Open-Meteo API              HTTP GET request

 6    API             Return weather data              {temp: 22°C, clear}

 7    Agent           Store observation                "Weather: 22°C, Clear"

 8    LLM             Reasoning (Thought phase)        "Need Fahrenheit"
                                                       "Use convert_c_to_f"

 9    Agent           Parse LLM output                 Tool: convert_c_to_f
                                                       Args: {c: 22}

10    Tool            Execute Python function          22 * 9/5 + 32

11    Tool            Return result                    71.6

12    Agent           Store observation                "71.6°F"

13    LLM             Generate final response          "Paris: Clear, 71.6°F"

14    Agent           Return to user                   Display result


TOOL SPECIFICATIONS
-------------------

Tool 1: get_weather()
┌──────────────────────────────────────────┐
│ Function: get_weather                    │
│ Input:    lat (float), lon (float)       │
│ Output:   dict                           │
│                                          │
│ Implementation:                          │
│   url = "api.open-meteo.com/v1/forecast"│
│   params = {                             │
│     "latitude": lat,                     │
│     "longitude": lon,                    │
│     "daily": "temperature_2m_max,..."    │
│   }                                      │
│   response = requests.get(url, params)   │
│   return parsed_weather_data             │
│                                          │
│ Returns:                                 │
│   {                                      │
│     "high_c": 24.5,                      │
│     "low_c": 18.2,                       │
│     "code": 0,                           │
│     "conditions": "Clear sky"            │
│   }                                      │
└──────────────────────────────────────────┘

Tool 2: convert_c_to_f()
┌──────────────────────────────────────────┐
│ Function: convert_c_to_f                 │
│ Input:    c (float)                      │
│ Output:   float                          │
│                                          │
│ Implementation:                          │
│   return c * 9 / 5 + 32                  │
│                                          │
│ Example:                                 │
│   Input:  22.0                           │
│   Output: 71.6                           │
└──────────────────────────────────────────┘


COMPONENTS
----------

1. AGENT (agent.py)
   - Manages TAO loop
   - Parses LLM tool calls
   - Executes tools
   - Tracks observations

2. LLM (llama3.2 via Ollama)
   - Reasoning and planning
   - Tool selection
   - Response formatting
   - Framework: LangChain-Ollama

3. TOOLS
   - get_weather: External API call
   - convert_c_to_f: Pure function
   - Both return structured data


PERFORMANCE CHARACTERISTICS
----------------------------

Metric                  Value
------                  -----
LLM Calls per Query     2 (plan + format)
Tool Calls per Query    2 (weather + convert)
Total Latency           3-6 seconds
  - LLM inference       ~2-4s
  - API calls           ~500ms
  - Tool execution      ~10ms
Success Rate            High (deterministic tools)


KEY LEARNING POINTS
-------------------

1. AGENTIC BEHAVIOR
   - Agent makes decisions (not just responds)
   - Selects appropriate tools
   - Chains multiple actions

2. TAO PATTERN
   - Thought: Reasoning
   - Action: Tool execution
   - Observation: Result processing
   - Iterative until complete

3. TOOL CALLING
   - LLM outputs structured tool calls
   - Agent executes tools
   - Results feed back to LLM

4. REACT FRAMEWORK
   - Reasoning + Acting
   - Multi-step problem solving
   - Observable decision making


LIMITATIONS
-----------

- No memory between queries
- Hardcoded tool definitions
- Single-threaded execution
- No error recovery
- Tools coupled to agent code


NEXT STEPS
----------

Lab 2.5: Add conversation memory for context
Lab 3:   Use MCP to separate tools from agent

================================================================================
